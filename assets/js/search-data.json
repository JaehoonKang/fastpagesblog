{
  
    
        "post0": {
            "title": "Markdown Test",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaehoonkang.github.io/fastpagesblog/markdown/2022/01/02/markdown_test.html",
            "relUrl": "/markdown/2022/01/02/markdown_test.html",
            "date": " • Jan 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Coding Challenge",
            "content": "Part1 . del nums[-2:] . nums . [100, 200, 300] . Question 02 . l = [200, 100, 300] l.insert(2, 1000) print(l) . [200, 100, 1000, 300] . Question 03 . l = [100, 200, 300] print(type(l)) . &lt;class &#39;list&#39;&gt; . list(range(1,3)) . [1, 2] . 10 . def star(n): #floor = range(1,n+1) #num = 2*n -1 for i in range(1, n+1): print(&#39; &#39;* (n-i) + &#39;*&#39; * (2*i -1)) . star(5) . NameError Traceback (most recent call last) &lt;ipython-input-2-9f66f1cc46e5&gt; in &lt;module&gt;() -&gt; 1 star(5) NameError: name &#39;star&#39; is not defined . Q11 . s = 0 for i in range(0,101): s += i s . 5050 . Q12 . x = Wizard(health, mana , armor) print(x.health, x.mana, x.armor) x.attack() . class Wizard(health = 545, mana =210, armor = 10): def __init__(self, health, mana, armor): self.health = health self.mana = mana self.armor = armor def attack(self): print(&quot;fireball&quot;) . Q13 . planet_list = [&quot;수성&quot;, &quot;금성&quot;, &quot;지구&quot;, &quot;화성&quot;, &quot;목성&quot;, &quot;토성&quot;, &quot;천왕성&quot;, &quot;해왕성&quot;] def planet(n): print(planet_list[n-1]) . planet(1) . 수성 . Q14 . def three(n): if n // 3 == 0: print(&quot;짝&quot;) else: print(n) three(4) . 4 . try: n = int(input(&quot;what nunber&quot;)) if n // 3 == 0: print(&quot;even&quot;) else: print(n) except: print(&quot;number please&quot;) . what nunber123 123 . Q15 . def welcome(name): print(f&#39;안녕하세요 저는 {name}입니다&#39;) welcome(&#39;김다영&#39;) . 안녕하세요 저는 김다영입니다 . Q16 . def reverse(s): print(s[::-1]) reverse(&#39;abs&#39;) . sba . s = &#39;&#39; for i in word: s = i + s s . def reverse(s): if len(s) == 1: return s else: return reverse(s[1:])+ s[0] . reverse(&#39;abcde&#39;) . &#39;edcba&#39; . Q18 . data = list(map(int,input().split())) data . m . def find_avg(a,b,c): return floor((a+b+c) / 3) . find_avg(3,4,6) . Q19 . two_num = input(&quot;input two numbers with space: &quot;) . input two numbers with space12 34 . two_num.split() . [&#39;12&#39;, &#39;34&#39;] . two_num = list(map(int,input(&quot;input two numbers with space: &quot;).split())) two_num . input two numbers with space: 23 43 . [23, 43] . time = two_num[0] ** two_num[1] . time . 35834136918934220777541995677272642015423987712183913488967 . numbers = (1, 2, 3, 4) result = map(lambda x: x + x, numbers) print(list(result)) numbers = (2,3) result = map(lambda x: x **2, numbers) print(list(result)) . [2, 4, 6, 8] [4, 9] . Q20 . two_num = list(map(int,input(&quot;input two numbers with space: &quot;).split())) . input two numbers with space: 34 65 . print(two_num[0] % two_num[1]) print(two_num[0] // two_num[1]) . 34 0 . Q21 . type({}) . dict . Q24 . name = input(&quot;what is ur name? :&quot;) print(name.upper()) . what is ur name? :sdfds SDFDS . s = &#39;&#39; for i in name: s += chr(ord(i) - 32) s . &#39;SDFDS&#39; . Q26 . korean_planet = [&quot;수성&quot;, &quot;금성&quot;, &quot;지구&quot;, &quot;화성&quot;, &quot;목성&quot;, &quot;토성&quot;, &quot;천왕성&quot;, &quot;해왕성&quot;] English_planet = [&quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;, &quot;Jupiter&quot;, &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot;] . planet = input(&quot;planet? :&quot;) p_index = korean_planet.index(planet) . planet? :수성 . English_planet[p_index] . &#39;Mercury&#39; . data = zip(korean_planet, English_planet) dict(data) . Q27 . name_list = list(input(&quot;student names? &quot;).split()) grade_list = list(map(int, input(&quot;grade? &quot;).split())) print(name_list, grade_list) . student names? a b c d grade? 12 34 54 65 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] [12, 34, 54, 65] . keys = input().split() values = map(int, input().split()) dict(zip(keys, values)) . a b 10 20 . {&#39;a&#39;: 10, &#39;b&#39;: 20} . Q28 . i = 0 While True: s = input(&quot;any string to parse? &quot;) print(s[i:i+1]) i += 1 . data = input() for i in range(len(data) -1 ): print(data[i] + data[i+1]) . asfasdb as sf fa as sd db . data = input() for i in range(len(data)-1): print(data[i] + data[i+1]) . safadsv sa af fa ad ds sv . Q29 . word = input() if word == word.upper(): print(&quot;yes&quot;) else: print(&quot;no&quot;) . w no . word = list(input().split()) for i in word: if i == i.upper(): print(i) . w W D e W D . data = input() work = True for i in data: if ord(i) &gt;=65 and ord(i) &lt;=90: continue else: work = False break else: print(&#39;yes&#39;) if not work: print(&#39;no&#39;) . a no . Q30 . sentence = input() word = input() sen_list = list(sentence.split()) if word in sen_list: print(sentence.index(word)) else: print(&quot;not in index&quot;) . show me the money the 8 . sen = input() w = input() if w in sen: print(sen.find(w)) . showme the money me 4 . Q32 . length_sentence = len(list(input().split())) length_sentence . fly to the monn . 4 . Q33 . nums = list(input().split()) s=&#39;&#39; for i in nums: s = i + &#39; &#39; + s rev = list(map(int, s.split())) rev . 1 92 3 4 5 . [5, 4, 3, 92, 1] . part2 . Q34 . l = [1,2,3] [1,2,3] == [1,2,3].sort() . False . s = input() l = [float(i) for i in s.split(&#39; &#39;)] l . 177 198 156 178 . [177.0, 198.0, 156.0, 178.0] . Q35 . def one(n): def two(value): return value ** n return two a = one(2) b = one(3) c = one(4) print(a(10)) print(b(10)) print(c(10)) . 100 1000 10000 . 12/30/21 . Q36 . num = int(input()) for i in range(1,10): print(num * i, end = &quot; &quot;) . 2 2 4 6 8 10 12 14 16 18 . [i * num for i in range(1,10)] . [2, 4, 6, 8, 10, 12, 14, 16, 18] . w = int(input()) s = &#39;&#39; for i in range(1,10): s += str(w * i) + &#39; &#39; print(s) . 3 3 6 9 12 15 18 21 24 27 . Q37 . l = input().split() l_list = list(l) l_set = set(l) b ={} for i in l_set: b[i] = l_list.count(i) for k, v in b.items(): if v == max(b.values()): print(f&#39;{k} has {v}&#39;) . 원범 원범 혜원 혜원 혜원 혜원 유진 유진 혜원 has 4 . data = input().split() data_set = set(data) data_dict = {} print(data) for key in data_set: data_dict[key] = data.count(key) print(f&#39;{max(data_dict, key = data_dict.get)} is {max(data_dict.values())}&#39;) . 원범 원범 혜원 혜원 유진 유진 유진 유진 [&#39;원범&#39;, &#39;원범&#39;, &#39;혜원&#39;, &#39;혜원&#39;, &#39;유진&#39;, &#39;유진&#39;, &#39;유진&#39;, &#39;유진&#39;] 유진 is 4 . Q38 . l = input().split() l_list = list(l) l_set = set(l) a = sorted(list(l_set)) b = a[:-4:-1] n = 0 for i in b: n += l_list.count(i) n . 97 86 75 66 55 97 85 97 97 95 . 6 . Q39 . sen = input() s = &#39;&#39; for i in sen: if i == &#39;q&#39;: s += &#39;e&#39; elif i ==&#39;b&#39;: s += &#39;n&#39; else: s += i print(s) . hqllo my bamq is hyqwob hello my name is hyewon . 1/2/22 . Q40 . limit = int(input()) number = int(input()) friends = list(map(int,input().split())) count = 0 weight = 0 for i in friends: if weight &lt; limit: weight += i count +=1 else: print(count) . 50 5 20 20 20 20 20 3 3 . 제한무게 = float(input()) 친구수 = int(input()) 친구몸무게 = [] for i in range(친구수): 친구몸무게.append(float(input)) 전체몸무게 = 0 for i in range(친구수): 전체몸무게 += 친구몸무게[i] if 전체몸무게 &gt; 제한무게: print(i) break . Q41 . num = int(input()) for i in range(1, num+1): if (num % i) == 0: if i == 1 and i == num: print(&quot;Yes&quot;) else: print(&quot;No&quot;) . 20 No No No No No No No No No No No No No No . Q42 . import datetime def solution(a,b): date = datetime.datetime(2020, a, b) return date.strftime(&quot;%a&quot;) solution(11, 15) solution(5, 24) . &#39;Sun&#39; . Q43 .",
            "url": "https://jaehoonkang.github.io/fastpagesblog/colab/jupyter/python/codingeveryday/2022/01/01/_01_02_Coding_Challenge.html",
            "relUrl": "/colab/jupyter/python/codingeveryday/2022/01/01/_01_02_Coding_Challenge.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jaehoonkang.github.io/fastpagesblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaehoonkang.github.io/fastpagesblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaehoonkang.github.io/fastpagesblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaehoonkang.github.io/fastpagesblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}